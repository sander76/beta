name: CI
on: 
  push:

jobs:
  test:
    name: ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10","3.11"]
      
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
  
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - run: pip install nox
      - run: pip install poetry
      - run: nox --session "test(python='${{ matrix.python-version }}')"
        env:
          PYTHONDEVMODE: 1
      - name: "Upload coverage data"
        uses: actions/upload-artifact@v3
        with:
          name: covdata
          path: coverage.*
  quality:
    name: quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - run: pip install nox
      - run: pip install poetry
      - run: nox --session quality
      - run: git fetch --tags
      - run: nox --session check_version
        env:
          PYTHONDEVMODE: 1
  coverage:
    name: Coverage
    needs: 
      - test
      - quality
    runs-on: ubuntu-latest
    steps:
      - name: "Check out the repo"
        uses: "actions/checkout@v3"

      - name: "Set up Python"
        uses: "actions/setup-python@v4"
        with:
          python-version: "3.11"

      - name: "Download coverage data"
        uses: actions/download-artifact@v3
        with:
          name: covdata

      - name: "Combine"
        run: |
          export TOTAL=$(python -c "import json;print(json.load(open('coverage.json'))['totals']['percent_covered_display'])")
          echo "total=$TOTAL" >> $GITHUB_ENV
          echo "### Total coverage: ${TOTAL}%" >> $GITHUB_STEP_SUMMARY

      - name: "Make badge"
        uses: schneegans/dynamic-badges-action@v1.4.0
        with:
          # GIST_TOKEN is a GitHub personal access token with scope "gist".
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: a25f1e6bfcb3b085ffe05f520b56e43c   # replace with your real Gist id.
          filename: covbadge.json
          label: Coverage
          message: ${{ env.total }}%
          minColorRange: 50
          maxColorRange: 90
          valColorRange: ${{ env.total }}
  
  
  tag_version:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - test
      - quality
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - run: pip install poetry
      - name: create a new tag based on poetry version.
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
        
          poetry version --short | xargs -I {} git tag -a v{} -m "version {}"
      - name: push_the_tag
        run: |
          poetry version --short | xargs -I {} git push origin v{}
  deploy:
    if: github.ref == 'refs/heads/main'
    needs:
      - test
      - quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - run: pip install nox
      - run: pip install poetry
      - run: poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
      - run: poetry publish --build
